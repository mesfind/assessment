postdata <- readr::read_csv("https://raw.githubusercontent.com/kariljordan/assessment-fork/master/programmatic-assessment/instructor-training/data/2018-instructor-training-data.csv")
# Function that makes a table of counts and percentages
# question_n is set by default to the number of trainees in the survey. This value may have to be set by question.
question_n <- nrow(postdata)
tally_and_perc <- function(df, colname, na.rm = FALSE, question_n){
quo_colname <- enquo(colname)
df %>%
group_by(!!quo_colname) %>%
tally() %>%
filter(if_else(rep(na.rm, nrow(.)),
!is.na(!!quo_colname),
as.logical(rep(1, nrow(.))))) %>%
mutate(`%` = round(n / question_n * 100, 1))
}
# function to compute number of non-NA responses to a question
n_responses_to_the_question <- function(df, from_colname, to_colname) {
quo_from_colname <- enquo(from_colname)
quo_to_colname <- enquo(to_colname)
rowsums <-
df %>%
select(UQ(quo_from_colname):UQ(quo_to_colname)) %>%
# check that each row has a value for at least one col
# convert to numeric, if NA, then put a zero, otherwise 1
map_df(., ~ifelse(is.na(.x), 0, 1)) %>%
# sum to see if any rows have no reponses
rowSums()
# for all behaviors
idx <- ifelse(rowsums == 0, FALSE, TRUE)
sum(idx)
}
# When are you taking this survey?
when_taking = c("I have just completed the training, and am taking it at the event", "I have recently completed the training, and am taking it after I left the event")
when_taking = factor(when_taking)
postdata$WhenTaking = factor(postdata$WhenTaking, levels = when_taking)
postdata_when_taking_tally <-
postdata %>%
group_by(WhenTaking) %>%
tally() %>%
filter(!is.na(WhenTaking)) %>%
mutate(perc = round(n/sum(n) * 100, 0))
kable(postdata_when_taking_tally, format = 'markdown', row.names = NA, col.names = c("When are you taking the survey?", "n", "%"))
# Come back and fix table column headers
# What is your downain of research/study?
# Responses are in columns 'Domain' through 'Column63'
n_responses_to_domain_question <-
n_responses_to_the_question(postdata,
from_colname = Domain,
to_colname = Column63)
domain_perc <-
postdata %>%
select(Domain:Column63) %>%
gather(col, domain_perc) %>%
group_by(domain_perc) %>%
tally_and_perc(domain_perc,
na.rm = TRUE,
question_n = n_responses_to_domain_question) %>%
filter(!is.na(domain_perc)) %>%
arrange(desc(n)) %>%
rename(Domain = domain_perc)
kable(domain_perc,
format = "markdown",
digits = getOption("digits"),
row.names = NA,
col.names = c("Domain of research/work/study", "n", "%"),
caption = NULL,
escape = TRUE)
# What is your current position?
position = c("Undergraduate Student", "Graduate Student", "Post-doctoral researcher", "Faculty", "Research staff (including research programmer)", "Support staff (including technical support)", "Librarian/archivist", "Commercial software developer", "Other (please specify)")
position = factor(position)
postdata$Position = factor(postdata$Position, levels = position)
postdata_position_tally <-
postdata %>%
group_by(Position) %>%
tally() %>%
filter(!is.na(Position)) %>%
mutate(perc = round(n/sum(n) * 100, 0))
ggplot(postdata_position_tally,
aes(Position, y = 100 * (n/sum(n)),
n)) +
geom_bar(stat = "identity", fill="orange") +
geom_text(aes(label=n), size= 4, vjust=-0.25) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n")) +
theme_classic() +
xlab("Trainees' Position") +
ylab("% Trainees") +
ggtitle("Breakdown of Instructor Trainees by Position") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 10)
# How would you describe yourself?
race = c("American Indian or Alaska Native",
"Asian",
"Black or African American",
"Hispanic or Latino(a)",
"Native Hawaiian or Other Pacific Islander",
"White",
"Prefer not to say",
"Multiple ethnicity / Other (please specify)")
race = factor(race)
postdata$Race = factor(postdata$Race, levels = race)
postdata_race_tally <-
postdata %>%
group_by(Race) %>%
tally() %>%
filter(!is.na(Race)) %>%
arrange(desc(n)) %>%
mutate(perc = round(n/sum(n) * 100, 0))
kable(postdata_race_tally,, format = 'markdown', row.names = NA, col.names = c("Racial/Ethnic Identity", "n", "%"))
# What is your gender?
gender = c("Female", "Male", "Other", "Prefer not to say")
gender = factor(gender)
postdata$Gender = factor(postdata$Gender, levels = gender)
postdata_gender_tally <-
postdata %>%
group_by(Gender) %>%
tally() %>%
filter(!is.na(Gender)) %>%
arrange(desc(n)) %>%
mutate(perc = round(n/sum(n) * 100, 0))
kable(postdata_gender_tally, format = 'markdown', col.names = c("Gender Identity", "n", "%"))
# How much of the information presented at this training event was new to you?
newinfo = c("None of it",
"Some of it",
"About half of it",
"Most of it",
"Al of it")
newinfo = factor(newinfo)
postdata$NewInformation = factor(postdata$NewInformation, levels = newinfo)
postdata_newinfo_tally <-
postdata %>%
group_by(NewInformation) %>%
tally() %>%
filter(!is.na(NewInformation)) %>%
mutate(perc = round(n/sum(n) * 100, 0))
kable(postdata_newinfo_tally, format = 'markdown', col.names = c("How much information was new?", "n", "%"))
ggplot(postdata_newinfo_tally,
aes(NewInformation, y = 100 * (n/sum(n)),
n)) +
geom_bar(stat = "identity", fill="orange") +
geom_text(aes(label=n), size= 4, vjust=-0.25) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n")) +
theme_classic() +
xlab("New Information") +
ylab("% Trainees") +
ggtitle("New Information Trainees were Presented") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14)
# Please give us some feedback about the overall training event.
# Subsetting a portion of the Likert items from InformationReasonableTime to Worth
myvars <- c("InformationReasonableTime",
"AtmosphereWelcoming", "LearnedSkills", "Material", "Recommend", "Worth")
newdata <- postdata[myvars]
cols_with_Agree <- map_lgl(newdata, ~`%in%`("Agree", .x))
newdata_agree <-  newdata[ , cols_with_Agree]
levels = c("Strongly Disagree",
"Disagree",
"Neither Agree nor Disagree",
"Agree",
"Strongly Agree")
factorfunction <- function(newdata, factlevel){
factor(newdata,
levels=factlevel,
ordered = TRUE)
fct_unify(newdata,
levels=factlevel)}
newdata_agree_likert <- likert(data.frame(lapply(newdata_agree, factor, levels, ordered=TRUE)))
#Heatmap
title <- "Perception of Instructor Training Impact"
plot(newdata_agree_likert, type =c("heat"), panel.arrange = NULL, panel.strip.color = "red", legend.position = "bottom") + ggtitle(title)
# How did you perceive the pace of the training?
pace = c("Too slow", "Slightly slow", "Just right", "Slightly fast", "Too fast")
pace = factor(pace)
postdata$Pace = factor(postdata$Pace, levels = pace)
postdata_pace_tally <-
postdata %>%
group_by(Pace) %>%
tally() %>%
filter(!is.na(Pace)) %>%
mutate(perc = round(n/sum(n) * 100, 0))
kable(postdata_pace_tally, format = 'markdown', col.names = c("Training Pace", "n", "%"))
ggplot(postdata_pace_tally,
aes(Pace, y = 100 * (n/sum(n)),
n)) +
geom_bar(stat = "identity", fill="orange") +
geom_text(aes(label=n), size= 4, vjust=-0.25) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n")) +
theme_classic() +
xlab("Pace") +
ylab("% Trainees") +
ggtitle("Trainees Perception of Workshop Pace") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14)
# How was the balance of lecture to hands-on work?
handson = c("Too much lecture",
"Slightly too much lecture",
"Balanced (lecture/hands-on)",
"Slightly too much hands-on",
"Too much hands-on")
handson = factor(handson)
postdata$HandsOn = factor(postdata$HandsOn, levels = handson)
postdata_handson_tally <-
postdata %>%
group_by(HandsOn) %>%
tally() %>%
filter(!is.na(HandsOn)) %>%
mutate(perc = round(n/sum(n) * 100, 0))
kable(postdata_handson_tally, format = 'markdown', col.names = c("Balance of Lecture to Hands-On", "n", "%"))
ggplot(postdata_handson_tally,
aes(HandsOn, y = 100 * (n/sum(n)),
n)) +
geom_bar(stat = "identity", fill="orange") +
geom_text(aes(label=n), size= 4, vjust=-0.25) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n")) +
theme_classic() +
xlab("Balance of Lecture") +
ylab("% Trainees") +
ggtitle("Trainees Perception of Workshop: \nBalance of Lecture vs. Hands-On") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14)
# Please select how you felt the instructor trainers(s) performed.
# Code chunk for likert plot (perception of workshop instructors/helpers)
ordered_often <-
c("Never", "Rarely", "Sometimes", "Often", "All of the time")
# Trainers
likert_cols_often_Train <-
postdata %>%
select(grep("Trainers", names(.))) %>%
mutate_if(is.character, as.factor) %>%
mutate_all(funs(fct_relevel(., ordered_often))) %>%
filter_all(all_vars(!is.na(.)))
names(likert_cols_often_Train) <-
gsub("Trainers", "", names(likert_cols_often_Train))
lc_often_train <- likert(data.frame(likert_cols_often_Train))
#Heatmap
title <- "Perception of How Instructor Trainers Performed"
plot(lc_often_train, type =c("heat"), panel.arrange = NULL, panel.strip.color = "red", legend.position = "bottom") + ggtitle(title)
# Code chunk for Pre/Post plots for experience with topics covered
# The pre- and post- columns are different, so we can't put them on the same plot.
# Do two plots and then stack them up using grid.arrange(), nest(), and map() to combine the pre/post plots
experience_pre <-
c("Little or no knowledge of topic",
"Some knowledge of topic",
"Extensive knowledge of topic")
experience_post <-
c("No increase in my knowledge",
"Knowledge increased slightly",
"Knowledge increased a great deal",
"N/A - Not covered at this workshop")
# Compute for all tools.
# Pre-Workshop
pre_experience <-
postdata %>%
select(contains("Pre")) %>%
gather() %>%
count(key, value) %>%
group_by(key) %>%
mutate(`%` = n/sum(n) * 100 ) %>%
ungroup() %>%
filter(value %in% experience_pre) %>%
mutate(key = gsub("Pre", "", key))
# Post-Workshop
post_experience <-
postdata %>%
select(contains("Post")) %>%
gather() %>%
count(key, value) %>%
group_by(key) %>%
mutate(`%` = n/sum(n) * 100 ) %>%
ungroup() %>%
filter(value %in% experience_post) %>%
mutate(key = gsub("Post", "", key))
# Plot pre and post as two grouped bar plots, then combine.
# Pre
#experience_pre_plot <-
ggplot(pre_experience,
aes(x = key,
y = `%`,
fill = fct_relevel(value,
experience_pre))) +
geom_col(position = "dodge") +
geom_text(aes(label=n),
size= 4, vjust=-0.25,
position=position_dodge(width=1)) +
scale_x_discrete(labels = function(x) lapply(strwrap(x,
width = 10,
simplify = FALSE),
paste,
collapse = "\n")) +
theme_classic() +
xlab("") +
ylab("% Trainees") +
ggtitle("Experience with Material Pre-Workshop") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14) +
theme(legend.position = "bottom",
legend.title=element_blank()) +
guides(fill = guide_legend(nrow = 2)) # wraps legend
# Plot pre and post as two grouped bar plots, then combine.
# Post
#experience_post_plot <-
ggplot(post_experience,
aes(x = key,
y = `%`,
fill = fct_rev(fct_relevel(value,
(experience_pre))))) +
geom_col(position = "dodge") +
geom_text(aes(label=n),
size= 4, vjust=-0.25,
position=position_dodge(width=1)) +
scale_x_discrete(labels = function(x) lapply(strwrap(x,
width = 10,
simplify = FALSE),
paste,
collapse = "\n")) +
theme_classic() +
xlab("") +
ylab("% Trainees") +
ggtitle("Change in Knowledge Post-Workshop") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14) +
theme(legend.position = "bottom",
legend.title=element_blank()) +
guides(fill = guide_legend(nrow = 2)) # wraps legend
# put the two plots together
#library(gridExtra)
#grid.arrange(experience_pre_plot,
#             experience_post_plot,
#             ncol = 1)
# Code chunk for change in motivation
change_in_motivation_factors <-
c("Less motivated",
"Slightly less motivated",
"No change in motivation",
"More motivated",
"Much more motivated",
"N/A - Topic not covered")
change_in_motivation <-
postdata %>%
select(contains("Motivated")) %>%
gather() %>%
count(key, value) %>%
group_by(key) %>%
mutate(`%` = n/sum(n) * 100 ) %>%
ungroup() %>%
filter(value %in% change_in_motivation_factors) %>%
mutate(key = gsub("Motivated", "", key))
ggplot(change_in_motivation,
aes(x = key,
y = `%`,
fill = fct_relevel(value,
change_in_motivation_factors))) +
geom_col(position = "dodge") +
geom_text(aes(label=n),
size= 4, vjust=-0.25,
position=position_dodge(width=1)) +
scale_x_discrete(labels = function(x) lapply(strwrap(x,
width = 10,
simplify = FALSE),
paste,
collapse = "\n")) +
theme_classic() +
xlab("") +
ylab("% Trainees") +
ggtitle("Change in motivation to learn more teaching pedagogy") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14) +
theme(legend.position = "bottom",
legend.title=element_blank())
# Code chunk for Pre/Post plots for ability to do a series of tasks.
# The before and after columns are different, so we can't put them on the same plot.
# Do two plots and then stack them up using grid.arrange(), nest(), and map() to combine the pre/post plots
ability_before <-
c("Yes",
"No",
"Maybe")
confidence_after <-
c("Confidence increased slightly",
"Confidence increased a bit",
"Confidence increased greatly",
"No change in confidence",
"N/A - Not covered at workshop")
# Compute for all tools.
# Ability before
before_ability <-
postdata %>%
select(contains("Before")) %>%
gather() %>%
count(key, value) %>%
group_by(key) %>%
mutate(`%` = n/sum(n) * 100 ) %>%
ungroup() %>%
filter(value %in% ability_before) %>%
mutate(key = gsub("Before", "", key))
# Change in confidence
after_confidence <-
postdata %>%
select(contains("After")) %>%
gather() %>%
count(key, value) %>%
group_by(key) %>%
mutate(`%` = n/sum(n) * 100 ) %>%
ungroup() %>%
filter(value %in% confidence_after) %>%
mutate(key = gsub("After", "", key))
# Plot before and after as two grouped bar plots, then combine.
# Before
#ability_before_plot <-
ggplot(before_ability,
aes(x = key,
y = `%`,
fill = fct_relevel(value,
ability_before))) +
geom_col(position = "dodge") +
geom_text(aes(label=n),
size= 4, vjust=-0.25,
position=position_dodge(width=1)) +
scale_x_discrete(labels = function(x) lapply(strwrap(x,
width = 5,
simplify = FALSE),
paste,
collapse = "\n")) +
theme_classic() +
xlab("") +
ylab("% Trainees") +
ggtitle("Ability to use these methods before the workshop") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14) +
theme(legend.position = "bottom",
legend.title=element_blank())
# Plot before and after as two grouped bar plots, then combine.
# After
#confidence_after_plot <-
ggplot(after_confidence,
aes(x = key,
y = `%`,
fill = fct_rev(fct_relevel(value,
confidence_after)))) +
geom_col(position = "dodge") +
geom_text(aes(label=n),
size= 4, vjust=-0.25,
position=position_dodge(width=1)) +
scale_x_discrete(labels = function(x) lapply(strwrap(x,
width = 5,
simplify = FALSE),
paste,
collapse = "\n")) +
theme_classic() +
xlab("") +
ylab("% Trainees") +
ggtitle("Confidence to use methods after workshop") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14) +
theme(legend.position = "bottom",
legend.title=element_blank()) +
guides(fill = guide_legend(nrow = 3))
# put the two plots together
#library(gridExtra)
#grid.arrange(ability_before_plot,
#             confidence_after_plot,
#             ncol = 1)
# Do you have a clearn understanding of what needs to be done to complete instructor training?
checkout_factor = c("No, not clear at all",
"Could use some more details",
"Yes, I understand",
"Other (please specify")
checkout_factor = factor(checkout_factor)
postdata$CompleteTraining = factor(postdata$CompleteTraining, levels = checkout_factor)
checkout_tally <-
postdata %>%
group_by(CompleteTraining) %>%
tally() %>%
filter(!is.na(CompleteTraining)) %>%
mutate(perc = round(n/sum(n) * 100, 0))
kable(checkout_tally, format = 'markdown', col.names = c("Clear on Checkout Process?", "n", "%"))
ggplot(checkout_tally,
aes(CompleteTraining, y = 100 * (n/sum(n)),
n)) +
geom_bar(stat = "identity", fill="orange") +
geom_text(aes(label=n), size= 4, vjust=-0.25) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n")) +
theme_classic() +
xlab("Understanding of Checkout Process") +
ylab("% Trainees") +
ggtitle("Trainees Understanding of Checkout Process") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14)
nps <-
postdata$LikelyToRecommend %>%
npc(breaks = list(0:6, 7:8, 9:10)) %>%
data.frame(category = .) %>%
filter(!is.na(category)) %>%
count(category) %>%
mutate("%" = (n / sum(n))*100)
kable(nps,format = 'markdown', colnames = c("Net Promoter Score", "n", "%"))
data_recommend_tally <-
postdata %>%
group_by(LikelyToRecommend) %>%
tally() %>%
filter(!is.na(LikelyToRecommend))
ggplot(data_recommend_tally,
aes(`LikelyToRecommend`, y = 100 * (n/sum(n)),
n)) +
geom_bar(stat = "identity", fill="purple") +
geom_text(aes(label=n), size= 4, vjust=-0.25) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n")) +
theme_classic() +
xlab("Likely to Recommend") +
ylab("% Trainees") +
ggtitle("Likely to Recommend") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14)
knit_with_parameters('~/Data_Carpentry/my-forked-repos/assessment-fork/programmatic-assessment/instructor-training/code/2018-instructor-training-report.Rmd')
rmarkdown::render
